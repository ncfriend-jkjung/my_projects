'''
로그인 성공
stock_list = ['000020', '000040', '000050', '000060', '000070', '000075', '000080', '000087', '000100', '000105', '000120', '000140', '000145', '000150', '000155', '000157', '000180', '000210', '000215', '000220', '000225', '000227', '000230', '000240', '000270', '000300', '000320', '000325', '000370', '000390', '000400', '000430', '000480', '000490', '000500', '000520', '000540', '000545', '000547', '000590', '000640', '000650', '000660', '000670', '000680', '000700', '000720', '000725', '000760', '000810', '000815', '000850', '000860', '000880', '000885', '00088K', '000890', '000910', '000950', '000970', '000990', '000995', '001020', '001040', '001045', '00104K', '001060', '001065', '001067', '001070', '001080', '001120', '001130', '001140', '001200', '001210', '001230', '001250', '001260', '001270', '001275', '001290', '001340', '001360', '001380', '001390', '001420', '001430', '001440', '001450', '001460', '001465', '001470', '001500', '001510', '001515', '001520', '001525', '001527', '001529', '001530', '001550', '001560', '001570', '001620', '001630', '001680', '001685', '001720', '001725', '001740', '001745', '001750', '001755', '001770', '001780', '001790', '001795', '001800', '001820', '001880', '001940', '002020', '002025', '002030', '002070', '002100', '002140', '002150', '002170', '002200', '002210', '002220', '002240', '002270', '002310', '002320', '002350', '002355', '002360', '002380', '002390', '002410', '002420', '002450', '002460', '002600', '002620', '002630', '002690', '002700', '002710', '002720', '002760', '002780', '002785', '002787', '002790', '002795', '00279K', '002810', '002820', '002840', '002870', '002880', '002900', '002920', '002960', '002990', '002995', '003000', '003010', '003030', '003060', '003070', '003075', '003080', '003090', '003120', '003160', '003200', '003220', '003230', '003240', '003280', '003300', '003350', '003410', '003460', '003465', '003470', '003475', '003480', '003490', '003495', '003520', '003530', '003535', '003540', '003545', '003547', '003550', '003555', '003560', '003570', '003580', '003610', '003620', '003650', '003670', '003680', '003690', '003720', '003780', '003830', '003850', '003920', '003925', '003960', '004000', '004020', '004060', '004080', '004090', '004100', '004105', '004140', '004150', '004170', '004250', '004255', '004270', '004310', '004360', '004365', '004370', '004380', '004410', '004415', '004430', '004440', '004450', '004490', '004540', '004545', '004560', '004565', '004690', '004700', '004710', '004720', '004770', '004800', '004830', '004835', '004840', '004870', '004890', '004910', '004920', '004960', '004970', '004980', '004985', '004990', '00499K', '005010', '005030', '005070', '005090', '005110', '005180', '005250', '005257', '005300', '005305', '005320', '005360', '005380', '005385', '005387', '005389', '005390', '005420', '005430', '005440', '005490', '005500', '005610', '005680', '005690', '005720', '005725', '005740', '005745', '005750', '005800', '005810', '005820', '005830', '005850', '005870', '005880', '005930', '005935', '005940', '005945', '005950', '005960', '005965', '006040', '006060', '006090', '006110', '006120', '006125', '006200', '006220', '006260', '006280', '006340', '006345', '006360', '006370', '006380', '006390', '006400', '006405', '006490', '006570', '006650', '006660', '006740', '006800', '006805', '00680K', '006840', '006880', '006890', '006980', '007070', '007110', '007120', '007160', '007210', '007280', '007310', '007340', '007460', '007540', '007570', '007575', '007590', '007610', '007630', '007660', '007690', '007700', '007810', '007815', '00781K', '007860', '007980', '008040', '008060', '00806K', '008110', '008250', '008260', '008350', '008355', '008420', '008490', '008500', '008560', '008600', '008700', '008730', '008770', '008775', '008870', '008930', '008970', '009070', '009140', '009150', '009155', '009160', '009180', '009190', '009200', '009240', '009270', '009275', '009290', '009310', '009320', '009410', '009415', '009420', '009440', '009450', '009460', '009470', '009540', '009580', '009680', '009770', '009810', '009830', '009835', '009900', '009970', '010040', '010050', '010060', '010100', '010120', '010130', '010140', '010145', '010400', '010420', '010580', '010600', '010620', '010640', '010660', '010690', '010770', '010780', '010820', '010950', '010955', '010960', '011000', '011070', '011090', '011150', '011155', '011170', '011200', '011210', '011230', '011280', '011300', '011330', '011390', '011420', '011500', '011690', '011700', '011760', '011780', '011785', '011790', '011810', '011930', '012030', '012160', '012170', '012200', '012205', '012280', '012320', '012330', '012450', '012510', '012600', '012610', '012630', '012690', '012750', '012800', '013000', '013360', '013520', '013570', '013580', '013700', '013870', '013890', '014130', '014160', '014280', '014285', '014440', '014530', '014580', '014680', '014710', '014790', '014820', '014825', '014830', '014910', '014915', '014990', '015020', '015230', '015260', '015350', '015360', '015540', '015590', '015760', '015860', '015890', '016090', '016360', '016380', '016385', '016450', '016580', '016590', '016610', '016710', '016740', '016800', '016880', '017040', '017180', '017370', '017390', '017550', '017670', '017800', '017810', '017900', '017940', '017960', '018250', '018260', '018470', '018500', '018670', '018880', '019170', '019175', '019180', '019440', '019490', '019680', '019685', '020000', '020120', '020150', '020560', '020760', '021050', '021240', '021820', '023000', '023150', '023350', '023450', '023530', '023590', '023800', '023810', '023960', '024070', '024090', '024110', '024720', '024890', '024900', '025000', '025530', '025540', '025560', '025620', '025750', '025820', '025860', '025890', '026890', '026940', '026960', '027410', '027740', '027970', '028050', '028100', '028260', '02826K', '028670', '029460', '029530', '029780', '030000', '030200', '030210', '030610', '030720', '030790', '031430', '031440', '031820', '032350', '032560', '032640', '032830', '033180', '033240', '033250', '033270', '033530', '033660', '033780', '033920', '034020', '034120', '034220', '034300', '034310', '034590', '034730', '03473K', '034830', '035000', '035150', '035250', '035420', '035510', '035720', '036420', '036460', '036530', '036570', '036580', '037270', '037560', '037710', '039130', '039490', '039570', '041650', '042660', '042670', '042700', '044380', '044450', '044820', '047040', '047050', '047400', '047810', '049770', '049800', '051600', '051630', '051900', '051905', '051910', '051915', '052690', '053210', '053690', '055490', '055550', '057050', '058430', '058650', '058730', '058850', '058860', '060980', '063160', '064350', '064960', '066570', '066575', '067830', '068270', '068290', '068400', '069260', '069460', '069500', '069620', '069640', '069660', '069730', '069960', '070960', '071050', '071055', '071090', '071320', '071840', '071950', '071970', '072130', '072710', '073240', '074610', '075180', '075580', '077500', '077970', '078000', '078520', '078930', '078935', '079160', '079430', '079550', '079980', '081000', '081660', '082640', '082740', '083420', '084010', '084670', '084680', '084690', '084695', '084870', '085310', '085620', '086280', '086790', '088260', '088350', '088790', '088980', '089470', '089590', '090080', '090350', '090355', '090370', '090430', '090435', '091090', '091160', '091170', '091180', '091220', '091230', '091810', '092200', '092220', '092230', '092440', '092780', '093050', '093230', '093240', '093370', '094280', '094800', '095570', '095720', '096300', '096760', '096770', '096775', '097230', '097950', '097955', '098560', '099140', '100220', '100250', '100840', '100910', '101060', '101140', '101280', '101530', '102110', '102260', '102280', '102460', '102780', '102960', '102970', '103140', '103590', '104520', '104530', '104700', '105010', '105190', '105560', '105630', '105780', '105840', '107590', '108450', '108590', '108670', '108675', '109070', '111110', '111770', '112610', '114090', '114100', '114260', '114460', '114470', '114800', '114820', '115390', '117460', '117580', '117680', '117690', '117700', '118000', '119650', '120030', '120110', '120115', '122090', '122260', '122630', '122900', '123310', '123320', '123690', '123700', '123890', '126560', '128820', '128940', '129260', '130660', '130680', '130730', '131890', '132030', '133690', '133820', '134380', '134790', '136340', '136490', '137610', '137930', '138040', '138230', '138250', '138490', '138520', '138530', '138540', '138910', '138920', '138930', '139130', '139220', '139230', '139240', '139250', '139260', '139270', '139280', '139290', '139310', '139320', '139480', '139660', '140570', '140580', '140700', '140710', '140910', '140950', '143210', '143460', '143850', '143860', '144600', '144620', '145210', '145270', '145670', '145720', '145850', '145990', '145995', '147970', '148020', '148070', '150460', '152100', '152380', '152500', '152550', '152870', '153130', '153270', '153360', '155660', '155900', '156080', '157450', '157490', '157500', '159800', '160580', '161000', '161390', '161510', '161890', '163560', '166400', '167860', '168300', '168490', '168580', '169950', '170900', '172580', '174350', '174360', '175330', '176710', '176950', '180640', '18064K', '181480', '181710', '182480', '182490', '183190', '183700', '183710', '185680', '185750', '189400', '190620', '192080', '192090', '192400', '192650', '192720', '192820', '194370', '195870', '195920', '195930', '195970', '195980', '196030', '196230', '200030', '200250', '200880', '203780', '204210', '204320', '204450', '204480', '205720', '207940', '208470', '210540', '210780', '210980', '211260', '211560', '211900', '213500', '213610', '213630', '214320', '214330', '214390', '214420', '214980', '215620', '217770', '217780', '217790', '218420', '219390', '219480', '219900', '220130', '223190', '225030', '225040', '225050', '225060', '225130', '225800', '226320', '226380', '226490', '226980', '227540', '227550', '227560', '227570', '227830', '227840', '228790', '228800', '228810', '228820', '229200', '229640', '229720', '230480', '232080', '233160', '233740', '234080', '234310', '236350', '237350', '237370', '237440', '238670', '238720', '239660', '241180', '241390', '241560', '241590', '243880', '243890', '244580', '244620', '244660', '244670', '244920', '245340', '245350', '245360', '245710', '248070', '248170', '248260', '248270', '249420', '250730', '250780', '251270', '251340', '251350', '251590', '251600', '251890', '252000', '252400', '252410', '252420', '252650', '252670', '252710', '252720', '252730', '253150', '253160', '253230', '253240', '253250', '253280', '253290', '256440', '256450', '256750', '261060', '261070', '261110', '261120', '261140', '261220', '261240', '261250', '261260', '261270', '261920', '264900', '26490K', '265690', '266160', '266360', '266370', '266390', '266410', '266420', '266550', '267250', '267260', '267270', '267290', '267440', '267450', '267490', '267500', '267770', '267850', '268280', '269370', '269420', '269530', '269540', '270800', '270810', '271050', '271060', '271560', '271980', '272210', '272220', '272230', '272450', '272550', '272560', '272570', '272580', '272910', '273130', '273140', '275280', '275290', '275300', '275750', '275980', '276000', '276650', '276970', '276990', '277540', '277630', '277640', '277650', '278240', '278420', '278530', '278540', '278620', '279530', '279540', '280320', '280360', '280920', '280930', '280940', '281820', '281990', '282000', '282330', '282690', '283580', '284430', '284740', '284980', '284990', '285000', '285010', '285020', '285130', '28513K', '285690', '286940', '287180', '287300', '287310', '287320', '287330', '289040', '289250', '289260', '289480', '289670', '290080', '290130', '291130', '291620', '291630', '291660', '291680', '291890', '292050', '292150', '292160', '292190', '292340', '292500', '292560', '292730', '292750', '292770', '293180', '293480', '293940', '294400', '294870', '295000', '295020', '295040', '295820', '296710', '298000', '298020', '298040', '298050', '298340', '298690', '298770', '299070', '299080', '300610', '300640', '300720', '300950', '301400', '301410', '301440', '302170', '302180', '302190', '302440', '302450', '304660', '304670', '304760', '304770', '304780', '304940', '305050', '305080', '305540', '305720', '306200', '306520', '306530', '306540', '306950', '307010', '307510', '307520', '307950', '308170', '308620', '309170', '309210', '309230', '310080', '310960', '310970', '314250', '314700', '315270', '315480', '315930', '315960', '316140', '316300', '316670', '317400', '319640', '319870', '321410', '322000', '322120', '322130', '322150', '322400', '322410', '325010', '325020', '326030', '326230', '326240', '328370', '329200', '329650', '329660', '329670', '329750', '330590', '331910', '332500', '332610', '332620', '332930', '332940', '333940', '333950', '333960', '333970', '333980', '334690', '334700', '334890', '336160', '336260', '33626K', '33626L', '336370', '33637K', '33637L', '337120', '337140', '337150', '337160', '338100', '339770', '341850', '342140', '342500', '342600', '342610', '342620', '344820', '346000', '348950', '350520', '352540', '352560', '352820', '353200', '35320K', '354240', '354350', '354500', '356540', '357120', '357250', '357870', '359210', '360140', '360150', '360200', '360750', '361580', '361590', '361610', '363280', '36328K', '363510', '363570', '363580', '364690', '364960', '364970', '364980', '364990', '365000', '365040', '365550', '365780', '367380', '367740', '367760', '367770', '368190', '368200', '368470', '368590', '368680', '371130', '371150', '371160', '371450', '371460', '371470', '371870', '372330', '373490', '373530', '373790', '375270', '375500', '37550K', '375760', '375770', '376250', '376410', '377990', '378850', '379780', '379790', '379800', '379810', '380340', '380440', '381170', '381180', '381560', '381570', '383220', '950210', '500053', '500054', '500055', '500056', '500057', '500058', '500007', '500039', '500042', '500043', '500044', '500052', '500001', '500002', '500035', '500036', '500046', '500047', '500048', '500049', '500020', '500028', '500050', '500051', '500003', '500004', '500005', '500006', '500008', '500009', '500010', '500011', '500012', '500013', '500014', '500015', '500016', '500017', '500018', '500019', '500021', '500022', '500023', '500024', '500027', '500029', '500030', '500032', '500037', '500038', '500040', '500041', '510014', '510015', '510001', '510011', '510002', '510003', '510004', '510005', '510006', '510007', '510010', '510008', '510009', '520030', '520004', '520005', '520006', '520007', '520013', '520014', '520015', '520026', '520009', '520010', '520011', '520003', '530068', '530069', '530070', '530071', '530072', '530073', '530074', '530075', '530076', '530004', '530013', '530067', '530053', '530060', '530066', '530015', '530016', '530019', '530020', '530032', '530033', '530031', '530036', '530055', '530056', '530061', '530062', '530063', '530064', '530002', '530014', '530023', '550059', '550060', '550057', '550041', '550044', '550045', '550042', '550043', '570045', '570046', '570047', '570048', '570049', '570050', '570051', '570052', '570053', '570054', '570055', '570056', '570057', '570058', '570019', '570020', '570021', '570029', '570030', '570022', '570023', '570042', '570043', '570044', '570025', '570027', '570037', '570038', '570034', '570035', '570036', '570028', '570031', '570032', '580011', '580012', '580013', '580014', '580015', '580016', '580017', '580010', '590009', '590010', '590011', '590013', '590018', '590012', '700002', '700003', '700001', '900140', '']

'''
def getCorpCode(stock_code):
    f = open("CORPCODE.xml", "r", encoding="UTF8")
    l = f.readlines()
    res = 0
    for i,v in enumerate(l):
        if("<stock_code>"+stock_code+"</stock_code>" in v):
            res = i
            break
    f.close()
    if(res > 0):
        return l[res-2].split("corp_code")[1][1:-2]
    return None

# 모듈 불러오기

from urllib.request import urlopen
from urllib.parse import urlencode, unquote, quote_plus
import urllib
import requests
import json

json_data = {}
stock_list = ['000020', '000040', '000050', '000060', '000070', '000075', '000080', '000087', '000100', '000105', '000120', '000140', '000145', '000150', '000155', '000157', '000180', '000210', '000215', '000220', '000225', '000227', '000230', '000240', '000270', '000300', '000320', '000325', '000370', '000390', '000400', '000430', '000480', '000490', '000500', '000520', '000540', '000545', '000547', '000590', '000640', '000650', '000660', '000670', '000680', '000700', '000720', '000725', '000760', '000810', '000815', '000850', '000860', '000880', '000885', '00088K', '000890', '000910', '000950', '000970', '000990', '000995', '001020', '001040', '001045', '00104K', '001060', '001065', '001067', '001070', '001080', '001120', '001130', '001140', '001200', '001210', '001230', '001250', '001260', '001270', '001275', '001290', '001340', '001360', '001380', '001390', '001420', '001430', '001440', '001450', '001460', '001465', '001470', '001500', '001510', '001515', '001520', '001525', '001527', '001529', '001530', '001550', '001560', '001570', '001620', '001630', '001680', '001685', '001720', '001725', '001740', '001745', '001750', '001755', '001770', '001780', '001790', '001795', '001800', '001820', '001880', '001940', '002020', '002025', '002030', '002070', '002100', '002140', '002150', '002170', '002200', '002210', '002220', '002240', '002270', '002310', '002320', '002350', '002355', '002360', '002380', '002390', '002410', '002420', '002450', '002460', '002600', '002620', '002630', '002690', '002700', '002710', '002720', '002760', '002780', '002785', '002787', '002790', '002795', '00279K', '002810', '002820', '002840', '002870', '002880', '002900', '002920', '002960', '002990', '002995', '003000', '003010', '003030', '003060', '003070', '003075', '003080', '003090', '003120', '003160', '003200', '003220', '003230', '003240', '003280', '003300', '003350', '003410', '003460', '003465', '003470', '003475', '003480', '003490', '003495', '003520', '003530', '003535', '003540', '003545', '003547', '003550', '003555', '003560', '003570', '003580', '003610', '003620', '003650', '003670', '003680', '003690', '003720', '003780', '003830', '003850', '003920', '003925', '003960', '004000', '004020', '004060', '004080', '004090', '004100', '004105', '004140', '004150', '004170', '004250', '004255', '004270', '004310', '004360', '004365', '004370', '004380', '004410', '004415', '004430', '004440', '004450', '004490', '004540', '004545', '004560', '004565', '004690', '004700', '004710', '004720', '004770', '004800', '004830', '004835', '004840', '004870', '004890', '004910', '004920', '004960', '004970', '004980', '004985', '004990', '00499K', '005010', '005030', '005070', '005090', '005110', '005180', '005250', '005257', '005300', '005305', '005320', '005360', '005380', '005385', '005387', '005389', '005390', '005420', '005430', '005440', '005490', '005500', '005610', '005680', '005690', '005720', '005725', '005740', '005745', '005750', '005800', '005810', '005820', '005830', '005850', '005870', '005880', '005930', '005935', '005940', '005945', '005950', '005960', '005965', '006040', '006060', '006090', '006110', '006120', '006125', '006200', '006220', '006260', '006280', '006340', '006345', '006360', '006370', '006380', '006390', '006400', '006405', '006490', '006570', '006650', '006660', '006740', '006800', '006805', '00680K', '006840', '006880', '006890', '006980', '007070', '007110', '007120', '007160', '007210', '007280', '007310', '007340', '007460', '007540', '007570', '007575', '007590', '007610', '007630', '007660', '007690', '007700', '007810', '007815', '00781K', '007860', '007980', '008040', '008060', '00806K', '008110', '008250', '008260', '008350', '008355', '008420', '008490', '008500', '008560', '008600', '008700', '008730', '008770', '008775', '008870', '008930', '008970', '009070', '009140', '009150', '009155', '009160', '009180', '009190', '009200', '009240', '009270', '009275', '009290', '009310', '009320', '009410', '009415', '009420', '009440', '009450', '009460', '009470', '009540', '009580', '009680', '009770', '009810', '009830', '009835', '009900', '009970', '010040', '010050', '010060', '010100', '010120', '010130', '010140', '010145', '010400', '010420', '010580', '010600', '010620', '010640', '010660', '010690', '010770', '010780', '010820', '010950', '010955', '010960', '011000', '011070', '011090', '011150', '011155', '011170', '011200', '011210', '011230', '011280', '011300', '011330', '011390', '011420', '011500', '011690', '011700', '011760', '011780', '011785', '011790', '011810', '011930', '012030', '012160', '012170', '012200', '012205', '012280', '012320', '012330', '012450', '012510', '012600', '012610', '012630', '012690', '012750', '012800', '013000', '013360', '013520', '013570', '013580', '013700', '013870', '013890', '014130', '014160', '014280', '014285', '014440', '014530', '014580', '014680', '014710', '014790', '014820', '014825', '014830', '014910', '014915', '014990', '015020', '015230', '015260', '015350', '015360', '015540', '015590', '015760', '015860', '015890', '016090', '016360', '016380', '016385', '016450', '016580', '016590', '016610', '016710', '016740', '016800', '016880', '017040', '017180', '017370', '017390', '017550', '017670', '017800', '017810', '017900', '017940', '017960', '018250', '018260', '018470', '018500', '018670', '018880', '019170', '019175', '019180', '019440', '019490', '019680', '019685', '020000', '020120', '020150', '020560', '020760', '021050', '021240', '021820', '023000', '023150', '023350', '023450', '023530', '023590', '023800', '023810', '023960', '024070', '024090', '024110', '024720', '024890', '024900', '025000', '025530', '025540', '025560', '025620', '025750', '025820', '025860', '025890', '026890', '026940', '026960', '027410', '027740', '027970', '028050', '028100', '028260', '02826K', '028670', '029460', '029530', '029780', '030000', '030200', '030210', '030610', '030720', '030790', '031430', '031440', '031820', '032350', '032560', '032640', '032830', '033180', '033240', '033250', '033270', '033530', '033660', '033780', '033920', '034020', '034120', '034220', '034300', '034310', '034590', '034730', '03473K', '034830', '035000', '035150', '035250', '035420', '035510', '035720', '036420', '036460', '036530', '036570', '036580', '037270', '037560', '037710', '039130', '039490', '039570', '041650', '042660', '042670', '042700', '044380', '044450', '044820', '047040', '047050', '047400', '047810', '049770', '049800', '051600', '051630', '051900', '051905', '051910', '051915', '052690', '053210', '053690', '055490', '055550', '057050', '058430', '058650', '058730', '058850', '058860', '060980', '063160', '064350', '064960', '066570', '066575', '067830', '068270', '068290', '068400', '069260', '069460', '069500', '069620', '069640', '069660', '069730', '069960', '070960', '071050', '071055', '071090', '071320', '071840', '071950', '071970', '072130', '072710', '073240', '074610', '075180', '075580', '077500', '077970', '078000', '078520', '078930', '078935', '079160', '079430', '079550', '079980', '081000', '081660', '082640', '082740', '083420', '084010', '084670', '084680', '084690', '084695', '084870', '085310', '085620', '086280', '086790', '088260', '088350', '088790', '088980', '089470', '089590', '090080', '090350', '090355', '090370', '090430', '090435', '091090', '091160', '091170', '091180', '091220', '091230', '091810', '092200', '092220', '092230', '092440', '092780', '093050', '093230', '093240', '093370', '094280', '094800', '095570', '095720', '096300', '096760', '096770', '096775', '097230', '097950', '097955', '098560', '099140', '100220', '100250', '100840', '100910', '101060', '101140', '101280', '101530', '102110', '102260', '102280', '102460', '102780', '102960', '102970', '103140', '103590', '104520', '104530', '104700', '105010', '105190', '105560', '105630', '105780', '105840', '107590', '108450', '108590', '108670', '108675', '109070', '111110', '111770', '112610', '114090', '114100', '114260', '114460', '114470', '114800', '114820', '115390', '117460', '117580', '117680', '117690', '117700', '118000', '119650', '120030', '120110', '120115', '122090', '122260', '122630', '122900', '123310', '123320', '123690', '123700', '123890', '126560', '128820', '128940', '129260', '130660', '130680', '130730', '131890', '132030', '133690', '133820', '134380', '134790', '136340', '136490', '137610', '137930', '138040', '138230', '138250', '138490', '138520', '138530', '138540', '138910', '138920', '138930', '139130', '139220', '139230', '139240', '139250', '139260', '139270', '139280', '139290', '139310', '139320', '139480', '139660', '140570', '140580', '140700', '140710', '140910', '140950', '143210', '143460', '143850', '143860', '144600', '144620', '145210', '145270', '145670', '145720', '145850', '145990', '145995', '147970', '148020', '148070', '150460', '152100', '152380', '152500', '152550', '152870', '153130', '153270', '153360', '155660', '155900', '156080', '157450', '157490', '157500', '159800', '160580', '161000', '161390', '161510', '161890', '163560', '166400', '167860', '168300', '168490', '168580', '169950', '170900', '172580', '174350', '174360', '175330', '176710', '176950', '180640', '18064K', '181480', '181710', '182480', '182490', '183190', '183700', '183710', '185680', '185750', '189400', '190620', '192080', '192090', '192400', '192650', '192720', '192820', '194370', '195870', '195920', '195930', '195970', '195980', '196030', '196230', '200030', '200250', '200880', '203780', '204210', '204320', '204450', '204480', '205720', '207940', '208470', '210540', '210780', '210980', '211260', '211560', '211900', '213500', '213610', '213630', '214320', '214330', '214390', '214420', '214980', '215620', '217770', '217780', '217790', '218420', '219390', '219480', '219900', '220130', '223190', '225030', '225040', '225050', '225060', '225130', '225800', '226320', '226380', '226490', '226980', '227540', '227550', '227560', '227570', '227830', '227840', '228790', '228800', '228810', '228820', '229200', '229640', '229720', '230480', '232080', '233160', '233740', '234080', '234310', '236350', '237350', '237370', '237440', '238670', '238720', '239660', '241180', '241390', '241560', '241590', '243880', '243890', '244580', '244620', '244660', '244670', '244920', '245340', '245350', '245360', '245710', '248070', '248170', '248260', '248270', '249420', '250730', '250780', '251270', '251340', '251350', '251590', '251600', '251890', '252000', '252400', '252410', '252420', '252650', '252670', '252710', '252720', '252730', '253150', '253160', '253230', '253240', '253250', '253280', '253290', '256440', '256450', '256750', '261060', '261070', '261110', '261120', '261140', '261220', '261240', '261250', '261260', '261270', '261920', '264900', '26490K', '265690', '266160', '266360', '266370', '266390', '266410', '266420', '266550', '267250', '267260', '267270', '267290', '267440', '267450', '267490', '267500', '267770', '267850', '268280', '269370', '269420', '269530', '269540', '270800', '270810', '271050', '271060', '271560', '271980', '272210', '272220', '272230', '272450', '272550', '272560', '272570', '272580', '272910', '273130', '273140', '275280', '275290', '275300', '275750', '275980', '276000', '276650', '276970', '276990', '277540', '277630', '277640', '277650', '278240', '278420', '278530', '278540', '278620', '279530', '279540', '280320', '280360', '280920', '280930', '280940', '281820', '281990', '282000', '282330', '282690', '283580', '284430', '284740', '284980', '284990', '285000', '285010', '285020', '285130', '28513K', '285690', '286940', '287180', '287300', '287310', '287320', '287330', '289040', '289250', '289260', '289480', '289670', '290080', '290130', '291130', '291620', '291630', '291660', '291680', '291890', '292050', '292150', '292160', '292190', '292340', '292500', '292560', '292730', '292750', '292770', '293180', '293480', '293940', '294400', '294870', '295000', '295020', '295040', '295820', '296710', '298000', '298020', '298040', '298050', '298340', '298690', '298770', '299070', '299080', '300610', '300640', '300720', '300950', '301400', '301410', '301440', '302170', '302180', '302190', '302440', '302450', '304660', '304670', '304760', '304770', '304780', '304940', '305050', '305080', '305540', '305720', '306200', '306520', '306530', '306540', '306950', '307010', '307510', '307520', '307950', '308170', '308620', '309170', '309210', '309230', '310080', '310960', '310970', '314250', '314700', '315270', '315480', '315930', '315960', '316140', '316300', '316670', '317400', '319640', '319870', '321410', '322000', '322120', '322130', '322150', '322400', '322410', '325010', '325020', '326030', '326230', '326240', '328370', '329200', '329650', '329660', '329670', '329750', '330590', '331910', '332500', '332610', '332620', '332930', '332940', '333940', '333950', '333960', '333970', '333980', '334690', '334700', '334890', '336160', '336260', '33626K', '33626L', '336370', '33637K', '33637L', '337120', '337140', '337150', '337160', '338100', '339770', '341850', '342140', '342500', '342600', '342610', '342620', '344820', '346000', '348950', '350520', '352540', '352560', '352820', '353200', '35320K', '354240', '354350', '354500', '356540', '357120', '357250', '357870', '359210', '360140', '360150', '360200', '360750', '361580', '361590', '361610', '363280', '36328K', '363510', '363570', '363580', '364690', '364960', '364970', '364980', '364990', '365000', '365040', '365550', '365780', '367380', '367740', '367760', '367770', '368190', '368200', '368470', '368590', '368680', '371130', '371150', '371160', '371450', '371460', '371470', '371870', '372330', '373490', '373530', '373790', '375270', '375500', '37550K', '375760', '375770', '376250', '376410', '377990', '378850', '379780', '379790', '379800', '379810', '380340', '380440', '381170', '381180', '381560', '381570', '383220', '950210', '500053', '500054', '500055', '500056', '500057', '500058', '500007', '500039', '500042', '500043', '500044', '500052', '500001', '500002', '500035', '500036', '500046', '500047', '500048', '500049', '500020', '500028', '500050', '500051', '500003', '500004', '500005', '500006', '500008', '500009', '500010', '500011', '500012', '500013', '500014', '500015', '500016', '500017', '500018', '500019', '500021', '500022', '500023', '500024', '500027', '500029', '500030', '500032', '500037', '500038', '500040', '500041', '510014', '510015', '510001', '510011', '510002', '510003', '510004', '510005', '510006', '510007', '510010', '510008', '510009', '520030', '520004', '520005', '520006', '520007', '520013', '520014', '520015', '520026', '520009', '520010', '520011', '520003', '530068', '530069', '530070', '530071', '530072', '530073', '530074', '530075', '530076', '530004', '530013', '530067', '530053', '530060', '530066', '530015', '530016', '530019', '530020', '530032', '530033', '530031', '530036', '530055', '530056', '530061', '530062', '530063', '530064', '530002', '530014', '530023', '550059', '550060', '550057', '550041', '550044', '550045', '550042', '550043', '570045', '570046', '570047', '570048', '570049', '570050', '570051', '570052', '570053', '570054', '570055', '570056', '570057', '570058', '570019', '570020', '570021', '570029', '570030', '570022', '570023', '570042', '570043', '570044', '570025', '570027', '570037', '570038', '570034', '570035', '570036', '570028', '570031', '570032', '580011', '580012', '580013', '580014', '580015', '580016', '580017', '580010', '590009', '590010', '590011', '590013', '590018', '590012', '700002', '700003', '700001', '900140', '']
api_key='7ba1979ed889f1e984b8ebea817b44c361f3e503' # api key 변수 설정
#urls : 0) 단일회사 주요 재무제표, 1)단일회사 전체재무제표
urls = ["https://opendart.fss.or.kr/api/fnlttSinglAcnt.json", 
       "https://opendart.fss.or.kr/api/fnlttSinglAcntAll.json"]
reprt_list = ['11013', '11012', '11014', '11011']
years_list = ['2022']#['2015', '2014', '2013', '2012', '2011', '2010', '2009', '2008', '2007', '2006', '2005', '2004', '2003', '2002', '2001']
get_data_list = ["account_nm", "fs_nm","sj_nm", "thstrm_dt", "thstrm_amount"]
#URLs = 'https://opendart.fss.or.kr/api/list.json'
URLs = urls[0] #주요 재무재표 검색
start_flag = False
def runSaveDart(stock_list, start_flag, URLs):
    for stock in stock_list:
        if(start_flag):
            if(stock == "014440"):
                print("start")
                start_flag = False
            continue
        corp = getCorpCode(stock)
        json_data[stock] = {}
        for j in years_list:
            json_data[stock][j] = {}
            for i in reprt_list:
                params = {'crtfc_key':'7ba1979ed889f1e984b8ebea817b44c361f3e503','corp_code':corp,'bsns_year':j,'reprt_code':i}
                headers = {'Content-Type': 'application/json; charset=utf-8'}
                request = urllib.request.Request(URLs+unquote("?"+urlencode(params)))
                #print(URLs+unquote("?"+urlencode(params)))
                res = urlopen(request, timeout=60).read()
                decode_data = res.decode('utf-8')
                decode_json = json.loads(decode_data)
                #불필요 데이터 삭제 후 연결
                if(decode_json["status"] == "000"):
                    #필요한 데이터(시점, 키워드, 금액)만 dict에서 남김
                    json_data[stock][j][i] = []
                    for k in decode_json["list"]:
                        dump_dict = {}
                        for l in get_data_list:
                            dump_dict[l] = k[l]
                        json_data[stock][j][i].append(dump_dict)
                elif(decode_json["status"] == "020"):
                    print("over requested : %s" % stock)
                    return
        with open("stock_json\\2022\\"+stock+".json", 'w') as file:
            file.write(json.dumps(json_data[stock], ensure_ascii=False))
            print("write %s" % stock)


    print("json write finish")
    return
runSaveDart(stock_list, start_flag, URLs)
#print(getCorpCode(stock_list[0]))
#print(json.dumps(json_data, ensure_ascii=False))
#https://opendart.fss.or.kr/api/fnlttSinglAcnt.json?crtfc_key=7ba1979ed889f1e984b8ebea817b44c361f3e503&corp_code=000060&bsns_year=2020&reprt_code=11013

#bestchoice 중 가격분석 수행
#가격분석 기준은 거래량 급증 후 상승 혹은 하강(및 기타) 데이터로 구분하고, PCA로 그래프 표현
#상승 및 다른 지표가 육안으로 구분되면 성공
def makePCAfromData(analRes, csvFolder, dayLen, maxDataLen, upFlag, downFlag, mFlag):
    #PCA 분석용 dataframe 생성
    dataLen = 3
    dayFlag = 0
    cols = range(0,dayLen*dataLen+1)
    pcaDF = pd.DataFrame(index=range(0,1), columns=cols)
    yDF = pd.DataFrame(index=range(0,1), columns=cols)
    dumpDF = pd.DataFrame(index=range(0,1), columns=cols)
    pcaIndex = 0
    yIndex = 0
    dumpIndex = 0
    file_list = os.listdir(csvFolder)
    for fname in file_list:
        #print(analRes.keys())
        if(fname.split("_")[1] in analRes.keys()):
            #해당 csv 읽고, 거래량 급증 검색
            data = pd.read_csv(csvFolder+"/"+fname, encoding='cp949')
            #print(data)
            #print(data.shape[0])
            for i in data.index:
                if(i+dayLen+2+dayFlag > data.shape[0]):
                    break
                #가격이 증가하고, 거래량이 급증하는 순으로 검색(일자 순으로) - 가격은 전일현재가 대비 고가
                if(data.loc[i, '고가'] / data.loc[i+1+dayFlag, '현재가'] > upFlag): #전일대비 5%초과 상승경우
                    if(data.loc[i+1+dayFlag, '거래량'] / data.loc[i+2+dayFlag, '거래량'] > mFlag): #전일 거래량 급증(200%)
                        #분기기준에 통과하면 PCA 분석용 dataframe에 추가
                        #print(analRes[fname.split("_")[1]].keys())
                        if(checkInDivision(data.loc[i+2, '일자'], analRes[fname.split("_")[1]].keys())):
                            #print(data.loc[i+2, '일자'], fname.split("_")[1], analRes[fname.split("_")[1]].keys())
                            index = 0
                            dump = []
                            tVal = data.loc[i+2+dayFlag, '현재가']
                            mVal = data.loc[i+2+dayFlag, '거래량']
                            while(index < dayLen):
                                dump.append(data.loc[i+2+dayFlag+index, '고가']/ tVal)
                                #dump.append(data.loc[i+2+dayFlag+index, '시가']/ tVal)
                                #dump.append(data.loc[i+2+dayFlag+index, '저가']/ tVal)
                                dump.append(data.loc[i+2+dayFlag+index, '현재가']/ tVal)
                                dump.append(data.loc[i+2+dayFlag+index, '거래량']/ mVal)
                                index += 1
                            dump.append(data.loc[i, '고가']/ data.loc[i+1+dayFlag, '현재가'])
                            pcaDF.loc[pcaIndex] = dump
                            pcaIndex += 1
                            #return
                elif(data.loc[i, '고가'] / data.loc[i+1+dayFlag, '현재가'] <= downFlag): #전일대비 하락(비교군)
                    if(data.loc[i+1, '거래량'] / data.loc[i+2+dayFlag, '거래량'] > mFlag): #전일 거래량 급증(200%)
                        #분기기준에 통과하면 PCA 분석용 dataframe에 추가
                        if(checkInDivision(data.loc[i+1, '일자'], analRes[fname.split("_")[1]].keys())):
                            #print(fname)
                            #if(yIndex > maxDataLen):
                            #    continue
                            index = 0
                            dump = []
                            tVal = data.loc[i+2+dayFlag, '현재가']
                            mVal = data.loc[i+2+dayFlag, '거래량']
                            while(index < dayLen):
                                dump.append(data.loc[i+2+dayFlag+index, '고가']/ tVal)
                                #dump.append(data.loc[i+2+dayFlag+index, '시가']/ tVal)
                                #dump.append(data.loc[i+2+dayFlag+index, '저가']/ tVal)
                                dump.append(data.loc[i+2+dayFlag+index, '현재가']/ tVal)
                                dump.append(data.loc[i+2+dayFlag+index, '거래량'] / mVal)
                                index += 1
                            dump.append(data.loc[i, '고가']/ data.loc[i+1+dayFlag, '현재가'])
                            yDF.loc[yIndex] = dump
                            yIndex += 1
                else:
                    if(data.loc[i+1, '거래량'] / data.loc[i+2+dayFlag, '거래량'] > mFlag): #전일 거래량 급증(200%)
                        #분기기준에 통과하면 PCA 분석용 dataframe에 추가
                        if(checkInDivision(data.loc[i+1, '일자'], analRes[fname.split("_")[1]].keys())):
                            #print(fname)
                            #if(yIndex > maxDataLen):
                            #    continue
                            index = 0
                            dump = []
                            tVal = data.loc[i+2+dayFlag, '현재가']
                            mVal = data.loc[i+2+dayFlag, '거래량']
                            while(index < dayLen):
                                dump.append(data.loc[i+2+dayFlag+index, '고가']/ tVal)
                                #dump.append(data.loc[i+2+dayFlag+index, '시가']/ tVal)
                                #dump.append(data.loc[i+2+dayFlag+index, '저가']/ tVal)
                                dump.append(data.loc[i+2+dayFlag+index, '현재가']/ tVal)
                                dump.append(data.loc[i+2+dayFlag+index, '거래량'] / mVal)
                                index += 1
                            dump.append(data.loc[i, '고가']/ data.loc[i+1+dayFlag, '현재가'])
                            dumpDF.loc[dumpIndex] = dump
                            dumpIndex += 1
                            
    #print(pcaDF)
    #pcaDF = modifyDFR1(pcaDF)
    #yDF = modifyDFR1(yDF)
    #print(pcaDF.shape)
    #print(pca2)
    #return
    yLine = []
    resIndex = 0
    #결과값 정렬 및 10분위로 구분
    pcaDF = pcaDF.sort_values(by=[pcaDF.shape[1]-1])
    yDF = yDF.sort_values(by=[yDF.shape[1]-1])
    #retDF = pd.concat([pcaDF, yDF])
    print(pcaIndex, yIndex)
    while(resIndex < pcaIndex):
        yLine.append("Up")# + str(int(resIndex / pcaIndex * 3)+1))
        resIndex += 1
    resIndex = 0
    while(resIndex < yIndex):
        yLine.append("Down")# + str(int(resIndex / yIndex * 3)+1))
        resIndex += 1
    resIndex = 0
    while(resIndex < dumpIndex):
        yLine.append("Unknown")# + str(int(resIndex / yIndex * 3)+1))
        resIndex += 1
    mergeDF = pcaDF.append(yDF)
    mergeDF = mergeDF.append(dumpDF)
    #print(pcaDF)
    scaler = StandardScaler()
    #scaler = MinMaxScaler()
    #scaler = MaxAbsScaler()
    reducer = umap.UMAP()
    scdf1 = scaler.fit_transform(mergeDF)
    scdf1 = reducer.fit_transform(scdf1, y=yLine)
    df1_scaled = pd.DataFrame(scdf1)
    result = df1_scaled
    
    #pca = PCA(n_components = 2)
    #result = pca.fit_transform(df1_scaled)
    #result = pd.DataFrame(result, columns=['x','y'])
    #print(result)
    #print(pca.explained_variance_ratio_)
    #result
    target = pd.DataFrame(yLine, columns=["type"])
    merged = pd.concat([result, target], axis=1)
    zs = ss.zscore(merged[0])
    merged = merged.drop(merged[zs> 1.5].index)
    #print(zs)
    %matplotlib inline

    
    # font 정의
    mlp.rcParams['font.size'] = 10
    mlp.rcParams['font.family'] = 'Nanum Gothic'

    # 시각화
    plt.figure(figsize=(6, 4))
    #sns.set_palette(sns.color_palette("muted"))

    sns.scatterplot(merged[0], #["x"]
                         merged[1], 
                         hue=merged['type'], 
                         s=10

                        )
    plt.title('Iris')
    plt.show()
    return pcaDF, yDF, dumpDF, merged
#-----------------------------------------------------------------------------
    #쪼갠 데이터를 Augmentation - yLine도 동일하게 확장(사실상 재작성)
    yLine = []
    for i, d in divArrays.items():
        #데이터 뒤섞기 - 정렬된 데이터를 무작위로 배치
        np.random.shuffle(d)
        #데이터의 양을 늘림 - 두 데이터를 가중치를 부여하여 뒤섞음
        dumpArray = np.empty((0,flagPos+1), float)
        c = 0
        while(c < maxSize):
            j = 0
            k = 0
            while(j < d.shape[0]):
                while(k < d.shape[0]):
                    dumpArray = np.vstack([dumpArray, (d[j]*0.95+d[k]*0.05)])
                    yLine.append("F"+i)
                    k += 1
                    c += 1
                    if(maxSize <= c):
                        break
                j += 1
                if(maxSize <= c):
                    break
        divArrays[i] = dumpArray
        
    #print(divArrays["1.1"])
    #print(divArrays["1.1"].shape)
    #Augmentation 된 데이터를 재연결하여 하나의 DF로 만듬
    augArray = np.empty((0,flagPos+1), float)
    for i, d in divArrays.items():
        augArray = np.concatenate((augArray, d), axis=0)
    print(augArray.shape, len(yLine))
    pcaDF = pd.DataFrame(augArray)
    #yLine도 augmeted 된 크기에 맞춤. 모두 maxSize에 맞춤
    
 
 import os
import pymysql
import json
reprt_name = {'11013':'1div', '11012':'2div', '11014':'3div', '11011':'4div'}
db_codename = {'유동자산':'udjs', '현금자산':'hgjs' , '채권자산':'cgjs', '비유동자산':'budjs', '투자자산':'tjjs', '유형자산':'uhjs',
              '유동부채':'udbc', '비유동부채':'budbc', '자본금':'jbg', '자본잉여금':'jbiyg', '자본총계':'jbcg', '매출액':'mca',
              '매출원가':'mcwg', '매출총이익':'mccik', '영업이익':'yuik', '당기순이익':'dgsik', '이익잉여금': 'ikiyg'}
file_link = "C:\\Users\\정준권\\stock_json\\2022\\"
def setDB():
    #db 연결
    stock_db = pymysql.connect(
            user='stockuser', 
            passwd='1q2w#E$R', 
            host='127.0.0.1', 
            db='jmjp_db', 
            charset='utf8'
        )

    #cursor = stock_db.cursor()
    return stock_db

def setCursor(db):
    cursor = db.cursor()
    return cursor

def requestQuery(cursor, sqlCode):
    cursor.execute(sqlCode)
    res = cursor.fetchall()
    return res
    
#json 데이터를 읽고, mysql db 연결 저장
def uploadJSONtoMySQL(stock_code, json_data, cursor):
    #변수 정의
    division = ""
    #stock_code = ""
    fs_type = ""
    
    for year, y_data in json_data.items():
        for div, d_data in y_data.items():
            division = year+'0'+reprt_name[div][0]
            id_cfs = id_ofs = 0
            #fs_type = 
            #분기 확인 후 데이터 존재여부 확인 - 없으면 생성
            cursor.execute("SELECT `id`, `fs_type` FROM `jmjp_basic` WHERE `stock_code` = '"+stock_code+"' and `division` = '"+division+"'")
            if(cursor.rowcount < 1):
                cursor.execute("INSERT INTO `jmjp_basic` (`stock_code`, `division`, `fs_type`) VALUES ('"+stock_code+"','"+division+"','CFS')")
                cursor.execute("INSERT INTO `jmjp_basic` (`stock_code`, `division`, `fs_type`) VALUES ('"+stock_code+"','"+division+"','OFS')")
                cursor.execute("SELECT `id`, `fs_type` FROM `jmjp_basic` WHERE `stock_code` = '"+stock_code+"' and `division` = '"+division+"'")
            #데이터 기록할 id 확인 - CFS, OFS 구분
            res = cursor.fetchall()
            for i in res:
                if(i[1] == 'CFS'):
                    id_cfs = i[0]
                elif(i[1] == 'OFS'):
                    id_ofs = i[0]
            if(id_cfs == 0 or id_ofs == 0):
                continue #id 정보 없으면 넘어감(오류 상황 대응)
            #각 재무제표 정보를 하나씩 업데이터
            for j in d_data:
                try:
                    sql = ""
                    if(j['account_nm'] in db_codename.keys()):
                        if(j['fs_nm'] == '연결재무제표'):
                            sql = "UPDATE `jmjp_basic` SET `"+db_codename[j['account_nm']]+"` = "+j['thstrm_amount'].replace(",","")+" WHERE `id` = "+str(id_cfs)
                        else:
                            sql = "UPDATE `jmjp_basic` SET `"+db_codename[j['account_nm']]+"` = "+j['thstrm_amount'].replace(",","")+" WHERE `id` = "+str(id_ofs)
                        #print(sql)
                        cursor.execute(sql)
                except:
                    continue
                    
def uploadJMJP(file_link):
    filenames = os.listdir(file_link)
    res = {}
    DB = setDB()
    CS = setCursor(DB)
    
    #with open("C:\\Users\\정준권\\stock_json\\001140.json", "r") as file:
    #    json_data = json.load(file)
    #    uploadJSONtoMySQL("001140", json_data, CS)
    #'''
    for filename in filenames:
        f = filename.split(".")[0]
        #res[f] = {}
        full_filename = os.path.join(file_link, filename)
        #파일마다 재무제표 데이터 읽기(최신 데이터부터 계산)
        #사업보고서는 1~3분기 데이터 합산분 차감
        #1분기 보고서는 원본 그대로 계산
        print("upload %s file" % f )
        with open(full_filename, "r") as file:
            #json 변환
            json_data = json.load(file)
            uploadJSONtoMySQL(f, json_data, CS)
    #'''
        
    DB.close()
    print("upload finish")
    
def makeDBtoJSON(cursor, code_list, sql_opt):
    res_json = {}
    #각각의 재무제표 line 별로 json데이터로 생성
    for code in code_list:
        res_json[code] = {}
        if(sql_opt == "2021"):
            sql = "SELECT * FROM `jmjp_basic` WHERE `stock_code` = '"+code+"' and (`division` = '202004' or `division` = '202101' or `division` = '202102' or `division` = '202103' or `division` = '202104' or `division` = '202201' or `division` = '202202') ORDER BY `division` ASC"
        else:
            sql = "SELECT * FROM `jmjp_basic` WHERE `stock_code` = '"+code+"' ORDER BY `division` ASC"
        cursor.execute(sql)
        data = cursor.fetchall()
        for d in data:
            #print(d)
            if(d[2] not in res_json[code].keys()):
                res_json[code][d[2]] = {}
            if(d[3] not in res_json[code][d[2]].keys()):
                res_json[code][d[2]][d[3]] = {}
            #차례대로 json_data 입력
            res_json[code][d[2]][d[3]]['udjs']  = d[4]   #유동자산
            res_json[code][d[2]][d[3]]['hgjs']  = d[5]   #현금자산
            res_json[code][d[2]][d[3]]['cgjs']  = d[6]   #채권자산
            res_json[code][d[2]][d[3]]['budjs'] = d[7]   #비유동자산
            res_json[code][d[2]][d[3]]['tjjs']  = d[8]   #투자자산
            res_json[code][d[2]][d[3]]['uhjs']  = d[9]   #유형자산
            res_json[code][d[2]][d[3]]['udbc']  = d[10]  #유동부채
            res_json[code][d[2]][d[3]]['budbc'] = d[11]  #비유동부채
            res_json[code][d[2]][d[3]]['jbg']   = d[12]  #자본금
            res_json[code][d[2]][d[3]]['jbiyg'] = d[13]  #자본잉여금
            res_json[code][d[2]][d[3]]['ikiyg'] = d[14]  #이익잉여금
            res_json[code][d[2]][d[3]]['jbcg']  = d[15]  #자본총계
            res_json[code][d[2]][d[3]]['mca']   = d[16]  #매출액
            res_json[code][d[2]][d[3]]['mcwg']  = d[17]  #매출원가
            res_json[code][d[2]][d[3]]['mccik'] = d[18]  #매출총이익
            res_json[code][d[2]][d[3]]['yuik']  = d[19]  #영업이익
            res_json[code][d[2]][d[3]]['dgsik'] = d[20]  #당기순이익
            res_json[code][d[2]][d[3]]['jg']    = d[21]  #주가
            res_json[code][d[2]][d[3]]['jss']   = d[22]  #주식수
    
    return json.dumps(res_json)

def updateJMJP(cursor, stock_json):
    stock_dict = json.loads(stock_json)
    #print(stock_dict)
    for stock, s_data in stock_dict.items():
        print("update %s " % stock)
        for div, d_data in s_data.items():
            for fs_type, full_data in d_data.items():
                for key, data in full_data.items():
                    #데이터가 없으면, 업데이트 전에 생성
                    sql = "SELECT `id` FROM `jmjp_basic` WHERE `division` = '"+div+"' and `stock_code` = '"+stock+"'"
                    cursor.execute(sql)
                    if(cursor.rowcount < 1):
                        cursor.execute("INSERT INTO `jmjp_basic` (`stock_code`, `division`, `fs_type`) VALUES ('"+stock+"','"+div+"','CFS')")
                        cursor.execute("INSERT INTO `jmjp_basic` (`stock_code`, `division`, `fs_type`) VALUES ('"+stock+"','"+div+"','OFS')")
                    try:
                        sql = "UPDATE `jmjp_basic` SET `"+key+"` = "+str(data)+" WHERE `division` = '"+div+"' and `fs_type` = '"+fs_type+"' and `stock_code` = '"+stock+"'"
                        cursor.execute(sql)
                    except:
                        print("error sql : %s" % sql)
                        continue
    
    print("UPDATE complete")
    return
'''
#uploadJMJP(file_link)
DB = setDB()
CS = setCursor(DB)


for i in stock_list:
    f = open("stock_json/2022/"+i+".json", "r")
    stock_json_txt = f.read()
    f.close()
    uploadJSONtoMySQL(i, json.loads(stock_json_txt), CS)
DB.close()
#print(sample_json)'''

def checkPlusAndCFS1(dict_data, key):
    if(dict_data["CFS"][key] > 0):
        return True
    elif(dict_data["CFS"][key] == 0 and dict_data["OFS"][key] > 0):
        return True
    return False
def checkMinusAndCFS1(dict_data, key):
    if(dict_data["CFS"][key] < 0):
        return True
    elif(dict_data["CFS"][key] == 0 and dict_data["OFS"][key] < 0):
        return True
    return False
def checkPlusAndCFS1R(dict_data, key, base):
    if(dict_data["CFS"][base] > 0 and (dict_data["CFS"][key] / dict_data["CFS"][base]) > 0):
        return True
    elif(dict_data["CFS"][key] == 0 and dict_data["OFS"][base] > 0 and (dict_data["OFS"][key] / dict_data["OFS"][base]) > 0):
        return True
    return False
def checkMinusAndCFS1(dict_data, key, value):
    if(dict_data["CFS"][key] <= value):
        return True
    elif(dict_data["CFS"][key] == 0 and dict_data["CFS"][key] <= value):
        return True
    return False
def checkUpAndCFS1(dict_data_now, dict_data_before, key):
    if(dict_data["CFS"][key] > 0 and dict_data_before["CFS"][key] < 0):
        return True
    elif(dict_data["CFS"][key] == 0 and dict_data["OFS"][key] > 0 and dict_data_before["OFS"][key] < 0):
        return True
    return False
def checkDownAndCFS1(dict_data_now, dict_data_before, key):
    if(dict_data["CFS"][key] < 0 and dict_data_before["CFS"][key] > 0):
        return True
    elif(dict_data["CFS"][key] == 0 and dict_data["OFS"][key] < 0 and dict_data_before["OFS"][key] > 0):
        return True
    return False
def beforeDiv(division):
    if(division[4:] == "01"):
        return str(int(division[0:4])-1)+"04"
    else:
        return division[0:5]+str(int(division[5])-1)

#전체 데이터 선택 - 기본
def anal_all(stock_dict, division):
    return True
#당기순이익이 +면 선택. 연결재무제표 우선
def anal_dgsik_p(stock_dict, division):
    return checkPlusAndCFS1(stock_dict[division], "dgsik")
#당기순이익이 -면 선택. 연결재무제표 우선
def anal_dgsik_m(stock_dict, division):
    return checkMinusAndCFS1(stock_dict[division], "dgsik")
#영업이익이 -면 선택. 연결재무제표 우선
def anal_yuik_m(stock_dict, division):
    return checkMinusAndCFS1(stock_dict[division], "yuik")
#영업이익이 +면 선택, 연결 재무제표 우선
def anal_yuik_p(stock_dict, division):
    res = False
    res = checkPlusAndCFS1(stock_dict[division], "yuik")
    return res
#현재가가 5,000원 이하이면 선택
def anal_pr_u5000(stock_dict, division):
    res = False
    res = checkUnderAndCFS1(stock_dict[division], 'jg', 5000)
    return res
#현재가가 20,000원 이하이면 선택
def anal_pr_u20000(stock_dict, division):
    return checkUnderAndCFS1(stock_dict[division], 'jg', 20000)
#당기순이익이 +로 전환되면 선택
def anal_dgsik_u(stock_dict, division):
    return checkUpAndCFS1(stock_dict[division], stock_dict[beforeDiv(division)], 'dgsik')
#매출액이 증가하면 선택
def anal_mca_u(stock_dict, division):
    return checkUpAndCFS1(stock_dict[division], stock_dict[beforeDiv(division)], "mca")
#매출액이 감소하면 선택
def anal_mca_d(stock_dict, division):
    return checkDownAndCFS1(stock_dict[division], stock_dict[beforeDiv(division)], "mca")
#영업이익률이 +면 선택
def anal_yuikR_p(stock_dict, division):
    return checkPlusAndCFS1R(stock_dict[division], "yuik", "mca")
#당기순이익률이 +면 선택
def anal_dgsikR_p(stock_dict, division):
    return checkPlusAndCFS1R(stock_dict[division], "dgsik", "mca")
import os
import csv
import pandas as pd
import datetime
from sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import matplotlib as mlp
import seaborn as sns
import gc
import scipy.stats as ss
import umap
import random
import json

def getStockdatafromDB(opt):
    db = setDB()
    cs = setCursor(db)
    #div = ['202101', '202102']
    
    #DB 내의 종목 리스트 가져오기
    cs.execute("SELECT `stock_code` FROM jmjp_db.jmjp_basic group by `stock_code` order by `stock_code` ASC")
    stock_list = cs.fetchall()
    
    #종목별 db 데이터 가져오기(json 형식)
    stock_req_list = []
    for stock in stock_list:
        stock_req_list.append(stock[0])
    print("Make JSON data from DB...")
    stock_json = makeDBtoJSON(cs, stock_req_list, opt)
    db.close()
    return stock_json

def get_data_from_json(json_data, stock, div, key):
    try:
        if("CFS" not in json_data[stock][div]):
            return json_data[stock][div]["OFS"][key]
        if(json_data[stock][div]["CFS"][key] > 0):
            return json_data[stock][div]["CFS"][key]
        else:
            return json_data[stock][div]["OFS"][key]
    except:
        return 0
    
def prev_div(division): #이전분기 div값 반환
    res_div = 0
    if(division[4:] == "01"):#1분기면 년도를 -1하고 4분기로 고정
        res_div = str(int(division[:4])-1)+"04"
    else:
        res_div = division[:5]+str(int(division[5])-1)
    return res_div
def prev_year(division): #전년 동분기 div값 반환
    return str(int(division[:4])-1)+division[4:]
#추천하는 종목 n개 고르기[예제 영업이익률 상위 n개]
def recommand_stocks(func, stock_dict, div, n, exm_key):
    res = {}
    #exm_key = 1 # 1 : 영업이익률 상위순
    #exm_key = 2 # 2 : 영업이익 전년동분기 대비 증가율 순
    #exm_key = 3 # 3 : 영업이익 전분기 대비 증가율 순
    for stock, s_list in stock_dict.items():
        #res[stock] = {}
        #영업이익률 계산
        func_data = 0
        a_name = func.__name__
        val = 0
        try:
            flag = func(s_list, div)
            if(flag):
                if(exm_key == 1) : 
                    if(s_list[div]["CFS"]["yuik"] > 0):
                        val = s_list[div]["CFS"]["yuik"] / s_list[div]["CFS"]["mca"]
                    else:
                        val = s_list[div]["OFS"]["yuik"] / s_list[div]["OFS"]["mca"]
                elif(exm_key == 2): # 영업이익 전년동분기 대비 증가율 순
                    if(s_list[div]["CFS"]["yuik"] > 0):
                        val = (s_list[div]["CFS"]["yuik"] - s_list[prev_year(div)]["CFS"]["yuik"])/s_list[prev_year(div)]["CFS"]["yuik"]
                    else:
                        val = (s_list[div]["OFS"]["yuik"] - s_list[prev_year(div)]["OFS"]["yuik"])/s_list[prev_year(div)]["OFS"]["yuik"]
                elif(exm_key == 3): # 영업이익 전분기 대비 증가율 순
                    if(s_list[div]["CFS"]["yuik"] > 0):
                        val = (s_list[div]["CFS"]["yuik"] - s_list[prev_div(div)]["CFS"]["yuik"])/s_list[prev_div(div)]["CFS"]["yuik"]
                    else:
                        val = (s_list[div]["OFS"]["yuik"] - s_list[prev_div(div)]["OFS"]["yuik"])/s_list[prev_div(div)]["OFS"]["yuik"]
        except:
            val = 0
        if(val > 0):
            res[stock] = val
        
    #결과값 정렬 - 최상위 n개만 추출
    res = sorted(res.items(), key=(lambda x:x[1]), reverse=True)[0:n]
    #구매가격 및 평가지표 출력
    res_data = {}
    for i in res:
        #if(len(stock_dict[i[0]]) > 0):
        res_data[i[0]] = [ round(i[1], 2), stock_dict[i[0]][div]["CFS"]["jg"]]
    return res_data
            
    #재무제표 기준 데이터 상위 n 개를 선택. m배의 후보를 선정
def get_jmjp_best_n(analysts, stock_json, n, m):
    db = setDB()
    cs = setCursor(db)
    res = {}
    #i = 0
    div_best = {}
    stock_dict = json.loads(stock_json)
    div_best = {}
    check_vals = {}
    for stock, s_list in stock_dict.items():
        res[stock] = {}
        #print("Analyzing %s" %(stock))
        for div, data in s_list.items():
            res[stock][div] = []
            if(div not in check_vals):
                check_vals[div] = {}
            flag2 = False
            for a in analysts:
                a_name = a.__name__
                if(a_name not in check_vals[div]):
                    check_vals[div][a_name] = {}
                val = 0
                try:
                    flag = a(s_list, div)
                    #분석 기준에 합당하면, 종목과 분기 정보를 반환값에 저장
                    if(flag):
                        j_name = a_name.split("_")[1]
                        
                        if(data["CFS"][j_name] > 0):
                            val = data["CFS"][j_name] / data["CFS"]["mca"]
                        else:
                            val = data["OFS"][j_name] / data["CFS"]["mca"]
                        
                        res[stock][div].append(a_name)
                    else:
                        flag2 = True
                        
                    check_vals[div][a_name][stock] = val
                    #print(val)
                except:
                    flag = True
                    continue
            for a in analysts:
                if(flag2):
                    a_name = a.__name__
                    if(stock in check_vals[div][a_name]):
                        del check_vals[div][a_name][stock]
    #print(check_vals)
    
    #각 기준별 최고값 목록을 비교하여 m개의 후보중 모두 겹치는 n개의 종목 추출
    div_best = {}
    for k, div in check_vals.items():
        div_best[k] = []
        #분기별 종목 기준데이터마다 정렬하고, 정렬된 값 중 모두 겹치는 종목을 best 로 선정
        dump = []
        for a, data in div.items():
            #print(sorted(data.items(), key=(lambda x:x[1]), reverse=True))
            dump.append(sorted(data.items(), key=(lambda x:x[1]), reverse=True)[0:n*m])
        for i in range(0,len(dump[0])):
            #n개가 넘었다면, 즉시 종료
            if(len(div_best[k]) >= n):
                break
            flag = False
            #print(dump[0])
            key = dump[0][i][0]
            for d in dump:
                for l in d:
                    if(key == l[0]):
                        flag = True
            if(flag):
                div_best[k].append(key)
    #print(div_best)
    
    #n개의 결과가 나오지 않았다면, 각 종목마다 최상위 결과값을 더함
    #일단 부족한 대로 결과가 나오도록 해보고, 이후 조정
        
    #for k, div in div_best.items():
    #    div_best[k] = sorted(div, key=(lambda x:x[1]), reverse=True)[0:n]
            
    db.close()
    return div_best#res
#재무제표 기준 데이터 상위 n%를 선택

#DB에서 데이터를 읽어 분석하는 코드 작성
def analyzeJMJP(analysts, stock_json):
    res = {}
    
    #전체 데이터를 차례로 검사 수행
    stock_dict = json.loads(stock_json)
    for stock, s_list in stock_dict.items():
        res[stock] = {}
        #print("Analyzing %s" %(stock))
        for div in s_list.keys():
            res[stock][div] = []
            for a in analysts:
                try:
                    flag = a(s_list, div)
                    #분석 기준에 합당하면, 종목과 분기 정보를 반환값에 저장
                    if(flag):
                        res[stock][div].append(a.__name__)
                except:
                    continue
    
    return res
#분석결과 가장 많은 매칭이 된 종목 리스트만 출력
def printOutAnalizedJMJP(jmjp_res):
    res = {}
    maxCnt = 0
    for code, jongmok in jmjp_res.items():
        for bungi, data in jongmok.items():
            if(maxCnt < len(data)):
                res = {}
                res[code] = {}
                maxCnt = len(data)
                #print("refresh : %d" % maxCnt)
            if(maxCnt == len(data)):
                if(code not in res.keys()):
                    res[code] = {}
                res[code][bungi] = data
    return res

def checkInDivision(naljja, division, dataType):
    
    naljja = str(naljja)
    datestr = datetime.datetime.strptime(naljja, '%Y%m%d')
    divStart = 0
    divEnd = 0
    if(dataType == "V"):
        if(datestr < datetime.datetime(2021, 1,1,0,0,0)):
            return False
    return True
    for div in division:
        year = int(div[0:4])
        if(div[4:] == "01"): #1분기
            divStart = datetime.datetime(year, 4,1,0,0,0)
            divEnd = datetime.datetime(year, 5, 15,12,59,59)
        elif(div[4:] == "02"): #2분기
            divStart = datetime.datetime(year, 5,16,0,0,0)
            divEnd = datetime.datetime(year, 8, 15,12,59,59)
        elif(div[4:] == "03"): #3분기
            divStart = datetime.datetime(year, 8,16,0,0,0)
            divEnd = datetime.datetime(year, 11, 15,12,59,59)
        elif(div[4:] == "04"): #4분기
            divStart = datetime.datetime(year, 11,16,0,0,0)
            divEnd = datetime.datetime(year+1, 3, 31,12,59,59)
        if(divStart < datestr and divEnd > datestr): #분기 매칭되면
            return True
    
    return False
#DataFrame내의 가격 정보를 종가 기준 비율로 수정
def modifyDFR1(df1):
    #print(len(df1))
    l = 0
    resL = []
    while(l < len(df1)):
        dump = df1.iloc[l]
        root = dump[0]
        resD = []
        for i in dump:
            resD.append(i / root)
        resL.append(resD)
        l += 1
    resDF = pd.DataFrame(resL)
    return resDF

#bestchoice 중 가격분석 수행
#가격분석 기준은 거래량 급증 후 상승 혹은 하강(및 기타) 데이터로 구분하고, PCA로 그래프 표현
#상승 및 다른 지표가 육안으로 구분되면 성공
def makePCAfromData(analRes, csvFolder, dayLen, maxDataLen, rateFlags, mFlag, dataType, limitDayLen, udf):
    #PCA 분석용 dataframe 생성
    dataLen = 3
    dayFlag = 2
    cols = range(0,(dayLen+dayFlag)*dataLen+1)
    pcaDF = pd.DataFrame(index=range(0,1), columns=cols)
    pcaIndex = 0
    file_list = os.listdir(csvFolder)
    for fname in file_list:
        if(len(fname.split("_")) <= 1):
            continue
        if("valid" in csvFolder):
            code = fname.split("_")[2].split(".")[0]
        else:
            code = fname.split("_")[1].split(".")[0]
        #print(code, end=", ")
        if(code in analRes.keys()):
            if(os.path.isfile(csvFolder+"/"+fname) == False):
                continue
            #해당 csv 읽고, 거래량 급증 검색
            data = pd.read_csv(csvFolder+"/"+fname, encoding='cp949')
            #print(data)
            #print(data.shape[0])
            for i in data.index:
                if(i+dayLen+2+dayFlag > data.shape[0] or i > limitDayLen):
                    break
                if(data.loc[i+1+dayFlag, '거래량'] / data.loc[i+2+dayFlag, '거래량'] > mFlag): #전일 거래량 급증(200%)
                    #분기기준에 통과하면 PCA 분석용 dataframe에 추가
                    #print(analRes[fname.split("_")[1]].keys())
                    if(checkInDivision(data.loc[i+2+dayFlag, '일자'], analRes[code].keys(),dataType)):
                        #print(data.loc[i+2, '일자'], fname.split("_")[1], analRes[fname.split("_")[1]].keys())
                        index = 0
                        dump = []
                        tVal = data.loc[i+2+dayFlag, '현재가']
                        mVal = data.loc[i+2+dayFlag, '거래량']
                        #print(dayLen, dayFlag)
                        while(index < dayLen+dayFlag):
                            dump.append(data.loc[i+2+index, '고가']/ tVal)
                            #dump.append(data.loc[i+2+dayFlag+index, '시가']/ tVal)
                            #dump.append(data.loc[i+2+dayFlag+index, '저가']/ tVal)
                            dump.append(data.loc[i+2+index, '현재가']/ tVal)
                            dump.append(data.loc[i+2+index, '거래량']/ mVal)
                            index += 1
                        dump.append(data.loc[i+dayFlag, '고가']/ data.loc[i+1+dayFlag, '현재가'])
                        pcaDF.loc[pcaIndex] = dump
                        pcaIndex += 1
                            #return
    yLine = []
    resIndex = 0
    #결과값 정렬 및 구분
    #pcaDF = pcaDF.sort_values(by=[pcaDF.shape[1]-1])
    print(pcaIndex)
    flagPos =  pcaDF.shape[1]-1-dayFlag
    totalSize = {}
    for i in rateFlags:
        totalSize[str(i)] = 0
    while(resIndex < pcaIndex):
        for i in rateFlags:
            if(pcaDF.loc[resIndex, flagPos] >= i):
                yLine.append("F"+str(i))
                totalSize[str(i)] += 1
                break
        resIndex += 1
    print(totalSize)
    #데이터 크기 강제로 맞춰보기 - 제일 큰 데이터량으로 Augmentation
    maxSize = max(totalSize.values())
    print(maxSize)
    #데이터를 정렬하여, 그룹별로 쪼갬
    sortArray = np.array(pcaDF.sort_values(by=flagPos, axis=0).values.tolist())
    divArrays = {}
    for i in rateFlags:
        divArrays[str(i)] = np.empty((0,flagPos+1+dayFlag), float)
    for r in sortArray:
        for i in rateFlags:
            if(r[-1] > i):
                #row_n = divArrays[str(i)].shape[0]
                divArrays[str(i)] = np.vstack([divArrays[str(i)], r])
                break
    #적은 데이터 크기로 많은 데이터를 랜덤 삭제 - augmented 데이터는 활용 불가(sparse되는 현상)
    '''if(dataType == "R"):
        for i, d in divArrays.items():
            #데이터 뒤섞기 - 정렬된 데이터를 무작위로 배치
            np.random.shuffle(d)
            #최상위 데이터셋(원하는 목표)의 크기에 다른 데이터들을 맞춰서 삭제함
            tSize = min(divArrays[list(divArrays.keys())[0]].shape[0], d.shape[0])
            divArrays[i] = d[0:tSize]
        #조정된 데이터에 맞춰서 yLine을 재조정
        yLine = []
        augArray = np.empty((0,flagPos+1), float)
        for i, d in divArrays.items():
            for j in d:
                yLine.append("F"+i)
            augArray = np.concatenate((augArray, d), axis=0)
        print(augArray.shape, len(yLine))
        pcaDF = pd.DataFrame(augArray)
    '''
    #print(divArrays["1.01"])
    #print(divArrays["1.01"].shape)
    #mergeDF = pcaDF.append(yDF)
    #mergeDF = mergeDF.append(dumpDF)
    #print(pcaDF)
    scaler = StandardScaler()
    #scaler = MinMaxScaler()
    #scaler = MaxAbsScaler()
    
    scdf1 = scaler.fit_transform(pcaDF)
    
    if(dataType == "R"):
        udf = reducer.fit(scdf1, y=yLine)
        #scdf1 = reducer.fit_transform(scdf1, y=yLine)
        scdf1 = udf.transform(scdf1)
    else:
        scdf1 = udf.transform(scdf1)
    df1_scaled = pd.DataFrame(scdf1)
    result = df1_scaled
    
    #result
    target = pd.DataFrame(yLine, columns=["type"])
    merged = pd.concat([result, target], axis=1)
    #zs = ss.zscore(merged[0])
    #merged = merged.drop(merged[zs> 1.1].index)
    #print(zs)
    print(np.mean(merged[0]), np.mean(merged[1]))
    %matplotlib inline

    
    # font 정의
    mlp.rcParams['font.size'] = 10
    mlp.rcParams['font.family'] = 'Nanum Gothic'

    # 시각화
    plt.figure(figsize=(6, 4))
    #sns.set_palette(sns.color_palette("muted"))

    sns.scatterplot(merged[0], #["x"]
                         merged[1], 
                         hue=merged['type'], 
                         s=10

                        )
    plt.title('Iris')
    plt.show()
    return pcaDF, merged, udf
def mergeDF(xDF, yDF):
    sizeX = xDF.shape[1]
    xDF[sizeX] = 1
    sizeY = yDF.shape[1]
    yDF[sizeY] = 0
    resDF = pd.concat([xDF, yDF])
    return resDF
def next_div(div):
    if(div[4:6] == "04"):
        return str(int(div[0:4])+1)+"01"
    else:
        return div[0:5]+str(int(div[5:6])+1)

gc.collect()
#stock_json_org = getStockdatafromDB("0")
#stock_json_val = getStockdatafromDB("2021")
'''
f = open("source/stock_json_0.json", "r")
stock_json_org = f.read()
f.close()
f = open("source/stock_json_2021.json", "r")
stock_json_val = f.read()
f.close()
'''
#print(len(stock_json_org))
#print(len(stock_json_val))
#return

analFuncs = [anal_yuik_p]#[anal_dgsik_u, anal_dgsik_p, , anal_mca_u]
analRes_o = analyzeJMJP(analFuncs, stock_json_org)
#print(len(analRes_o))
bestChoice_o = printOutAnalizedJMJP(analRes_o)
analRes_v = analyzeJMJP(analFuncs, stock_json_val)
#print(len(analRes_v))
bestChoice_v = printOutAnalizedJMJP(analRes_v)
#print(bestChoice_o.keys())

test = get_jmjp_best_n(analFuncs, stock_json_org, 20,1)
#print(test)

#결과를 기준으로 2016년 부터 일정금액을 분산투자하여 2021년 3뷴기 가격을 마지막으로 정산한 금액과 수익 그래프 그리기
stock_dict = json.loads(stock_json_org)
price_list = []
#기준금액 설정 : 100만원을 분산투자[종목당 20만원]
pr = 1000000
'''
for k, d in test.items():
    
    if(int(k) < 201600): #2015까지는 skip
        continue
    if(k == "202201"): #2021 2분기까지수행(3분기 정산)
        break
    l = len(d)
    #추천종목의 가격확인 후 기준금액에 맞춰 구매
    db = setDB()
    cs = setCursor(db)
    for i in d:
        p = get_data_from_json(stock_dict, i, k, 'jg')
        if(p == 0):
            l -= 1
            continue
        #sql = "SELECT `jg`, `jss` FROM `jmjp_db`.`jmjp_basic` WHERE `division` = '"+k+"' and `stock_code` = '"+i+"'"
        #cs.execute(sql)
        #red = cs.fetchall()
        #p = red[0][0]
        s = int((pr / l) / p)
        if(s > 200):
            s = 200
        #print(s)
        price_list.append(s)
        pr -= s * p
        l -= 1
    index = 0
    for i in d:
        #print(next_div(k))
        p = get_data_from_json(stock_dict, i, next_div(k), 'jg')
        if(p == 0):
            continue
        #구매 후 이후 분기의 가격으로 정산할 것
        #sql = "SELECT `jg`, `jss` FROM `jmjp_db`.`jmjp_basic` WHERE `division` = '"+next_div(k)+"' and `stock_code` = '"+i+"'"
        #cs.execute(sql)
        #red = cs.fetchall()
        #p = red[0][0]
        pr += price_list[index] * p
        index += 1
    print("%s money : %d" % (k, pr))
    print(price_list)
    price_list = []
        
    db.close()
'''
test_list = ["201602", "201603", "201604", "201701", "201702", "201703", "201704", "201801", "201802", "201803", "201804", "201901", "201902", "201903", "201904", "202001", "202002", "202003", "202004", "202101", "202102", "202103", "202104", "202201", "202202"]
db = setDB()
cs = setCursor(db)
#print(get_data_from_json(stock_dict, s, next_div("202103"), 'jg'))
for i in test_list:
    rcm_stock = recommand_stocks(anal_yuik_p, stock_dict, i, 30, 3)
    print(i)
    print(rcm_stock)
    #예상 수익률 계산 - 종목과 분기, 현시점 가격과 다음분기 가격을 기준으로 예상 수익률을 계산
    rcm_result = {}
    try:
        for s, s_data in rcm_stock.items():
            #종목마다 다음 분기의 가격을 조회하고, 현재 값을 계산하여 수익률을 저장함
            p = get_data_from_json(stock_dict, s, next_div(i), 'jg')
            r = round((p - s_data[1])/s_data[1], 3)
            rcm_result[s] = r#[s_data[0], r, p, s_data[1]]
    except:
        print("err : %s, %s, %d" % (i, s, s_data[1]))
    print(rcm_result)
db.close()
#print(len(bestChoice_o[list(bestChoice_o.keys())[0]]))
'''for d in [600, 800, 1000, 1200, 1400]:#600, 800, 
    limitDayLen = d
    return_data = {}
    valid_data = {}
    dump_data = {}
    udf = 0
    #print("end")
    #valid_data = makePCAfromData(bestChoice, "source/stock_csv", 42, 500, 1, 1, 2)

    res_list = [1.06, 1.03, 1.01, 1, 0]
    reducer = umap.UMAP(random_state=40)
    #limitDayLen = 600
    dump_link = "source/dataframe/high/"+str(limitDayLen)

    for i in range(2, 9):
    #def runMultiTest(k):
        k = 1 * i
        print("data %s" %(k))
        (return_data[str(k)+"_1"], return_data[str(k)], udf) = makePCAfromData(bestChoice_o, "source/stock_csv", k, 500, res_list, 2, "R", limitDayLen, udf)
        time.sleep(1)
        (valid_data[str(k)+"_1"],  valid_data[str(k)], udf)  = makePCAfromData(bestChoice_v, "source/stock_csv", k, 500, res_list, 2, "V", limitDayLen, udf)
        (valid_data[str(k)+"_3"],  valid_data[str(k)+"_2"], udf)  = makePCAfromData(bestChoice_v, "source/stock_csv/valid", k, 500, res_list, 2, "V", limitDayLen, udf)
        (valid_data[str(k)+"_5"],  valid_data[str(k)+"_4"], udf)  = makePCAfromData(bestChoice_v, "source/stock_csv/valid2", k, 500, res_list, 2, "V", limitDayLen, udf)
        (valid_data[str(k)+"_7"],  valid_data[str(k)+"_6"], udf)  = makePCAfromData(bestChoice_v, "source/stock_csv/valid3", k, 500, res_list, 2, "V", limitDayLen, udf)
        #파일로 dump
        return_data[str(k)+"_1"].to_csv(dump_link+"/rdata_"+str(k)+"_o_"+str(limitDayLen)+".csv")
        return_data[str(k)].to_csv(dump_link+"/rdata_"+str(k)+"_u_"+str(limitDayLen)+".csv")
        valid_data[str(k)].to_csv(dump_link+"/vdata_"+str(k)+"_u_0_"+str(limitDayLen)+".csv")
        for i in range(1,8):
            if(i % 2 == 1):
                valid_data[str(k)+"_"+str(i)].to_csv(dump_link+"/vdata_"+str(k)+"_o_"+str(int(i/2))+"_"+str(limitDayLen)+".csv")
            else:
                valid_data[str(k)+"_"+str(i)].to_csv(dump_link+"/vdata_"+str(k)+"_u_"+str(int(i/2))+"_"+str(limitDayLen)+".csv")
        print("file dumped.")
        '''
    #dump_data[str(k)] = makePCAfromData(bestChoice_v, "source/stock_csv", k, 500, 1.05, 1.05, 2)
    #return_data[str(k)] = mergeDF(return_data[str(k)+"_1"], return_data[str(k)+"_0"])
    #valid_data[str(k)]  = mergeDF(valid_data[str(k)+"_1"],  valid_data[str(k)+"_0"])

#결과를 보고, 그 데이터 중 테스트하기 좋은 데이터 추려서 하나 가져오기
#학습데이터를 가져와서 학습모델 돌려보기 
#print(valid_data.values)
#makePCAfromData(bestChoice_v, "source/stock_csv", 2, 500, res_list, 2, "V", limitDayLen, udf)
#def load_pca_data(file_link):

    
